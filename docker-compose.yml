version: "3.3"
# 개발 전용! 배포에서는 패스워드등 민감 정보 환경변수화된 prod.yml 필요

services:
  database:
    user: ubuntu
    build: ./build/postgres
    expose:
      - "5432"
    volumes:
      - ./db:/var/lib/postgresql/data
      - ./scripts:/scripts:ro
    networks:
      - db-tier
    environment:
      - POSTGRES_USER=deepmush
      - POSTGRES_PASSWORD=deepmush
      - POSTGRES_DB=deepmush

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    networks:
      - db-tier
      - nginx-tier
    environment:
      PGADMIN_DEFAULT_EMAIL: deepmush@deepmush.com
      PGADMIN_DEFAULT_PASSWORD: deepmush
      PGADMIN_LISTEN_PORT: 8082
    expose:
      - "8082"

  mongodb:
    image: mongo
    restart: always
    expose:
      - "27017"
    volumes:
      - ./mongo-db:/data/db
    networks:
      - db-tier
    environment:
      MONGO_INITDB_ROOT_USERNAME: deepmush
      MONGO_INITDB_ROOT_PASSWORD: deepmush
      MONGO_INITDB_DATABASE: deepmush

  mongo-express:
    image: mongo-express
    restart: always
    depends_on:
      - mongodb
    networks:
      - db-tier
      - nginx-tier
    expose:
      - "8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_ADMINUSERNAME: deepmush
      ME_CONFIG_MONGODB_ADMINPASSWORD: deepmush

  backend:
    depends_on:
      - database
      - mongodb
    build: ./backend
    expose:
      - "8000"
    volumes:
      - ./backend:/backend
      - ../scripts:/scripts:ro
    environment:
      - USE_POSTGRES=1
      - IS_DOCKER=1
    networks:
      - db-tier
      - mq-tier
      - nginx-tier
      - prometheus-tier
    tty: true

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/config:/etc/nginx/conf.d:ro
      - ./nginx/logs:/var/log/nginx/
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"
    networks:
      - nginx-tier
    depends_on:
      - backend
      - pgadmin
      - mongo-express

  migrate:
    depends_on:
      - database
      - mongodb
    build: ./backend
    volumes:
      - ./backend:/backend
    environment:
      - USE_POSTGRES=1
      - IS_DOCKER=1
    networks:
      - db-tier
      - mq-tier
    entrypoint: "/bin/sh -c 'cd /backend ; while :; do python manage.py makemigrations ; python manage.py migrate ; sleep 15s ; done;'"
    tty: true

  rabbitmq:
    image: rabbitmq:3
    networks:
      - mq-tier
    expose:
      - "5672"

  worker:
    build:
      context: ./backend
    volumes:
      - ./backend:/backend
    entrypoint: "/bin/sh ./run-celery.sh"
    networks:
      - db-tier
      - mq-tier
    depends_on:
      - database
      - mongodb
    environment:
      - USE_POSTGRES=1
      - IS_DOCKER=1
    tty: true
  
  elk:
    image: sebp/elk
    ports:
      - "5601:5601"
      - "9200:9200"
      - "5044:5044"
    networks:
      - elk-tier
    volumes:
      - ./data/elk-data:/var/lib/elasticsearch
      - ./logstash/input.local.conf:/etc/logstash/conf.d/03-input.conf
      - ./elastic/elasticsearch.yml:/etc/elasticsearch/elasticsearch.yml
    environment:
      - ELASTIC_PASSWORD=deepmush

  filebeat:
    build: ./filebeat
    networks:
      - elk-tier
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - ./nginx/logs:/var/log/nginx
      - ./backend/logs:/var/log/backend
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      # - /var/run/docker.sock:/var/run/docker.sock:ro
    entrypoint: "/bin/sh -c 'sleep 60s && filebeat setup && filebeat -e && filebeat'"
    depends_on:
      - nginx
      - backend
      - elk
    links: 
      - elk
  
  cadvisor:
    image: google/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8080:8080
    networks:
      - prometheus-tier
    restart: always
    deploy:
      mode: global
      restart_policy:
        condition: on-failure

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - ./data/prometheus:/prometheus
    networks:
      - db-tier
      - prometheus-tier
      - nginx-tier
      - mq-tier
    expose:
      - "9090"
    ports:
      - "5005:9090"

  grafana:
    image: grafana/grafana
    links:
      - prometheus:prometheus
    networks:
      - prometheus-tier
    ports:
      - "5001:3000"
    environment:
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - ./data/grafana/grafana:/var/lib/grafana
      - ./data/grafana/provisioning:/etc/grafana/provisioning

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    expose:
      - "9100"
    restart: always
    networks:
      - prometheus-tier
    deploy:
      mode: global
  
networks:
  db-tier:
    driver: bridge
  mq-tier:
    driver: bridge
  nginx-tier:
    driver: bridge
  elk-tier:
    driver: bridge
  prometheus-tier:
    driver: bridge