"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
from .environments import get_secret
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

DB_DIR = Path.joinpath(BASE_DIR, 'db')

if not DB_DIR.exists():
    DB_DIR.mkdir()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_secret("SECRET_KEY")
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_secret("DEBUG") if get_secret("DEBUG") else False


ALLOWED_HOSTS = ['*']

CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

STATICFILES_DIRS = [
    BASE_DIR
]

AUTH_USER_MODEL = 'auth.User'

# site_id is primary key for queryset item in the site application.
# if add a site instead of replacing for the given examples.com, then you should use 2.
SITE_ID = 1

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',

    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework.authtoken',

    'config',

    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'dj_rest_auth',
    'dj_rest_auth.registration',

    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.kakao',

    'drf_yasg',
    'django.contrib.staticfiles',  # required for serving swagger ui's css/js files

    'corsheaders',

    'images',

    'test_without_migrations',
]


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'request_logging.middleware.LoggingMiddleware',
]

CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

IS_DOCKER = os.environ.get('IS_DOCKER')

log_filename = "django" if IS_DOCKER else "django.debug"

REQUEST_LOGGING_ENABLE_COLORIZE = False

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / f"logs/{log_filename}.log",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["file"],
            "level": "DEBUG",
            "propagate": True,
        },
        "django.request": {
            "handlers": ["file"],
            "level": "DEBUG",
            "propagate": True,
        },
    },
}

# enable stdout during test

NOSE_ARGS = ['--nocapture',
             '--nologcapture', ]


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

USE_POSTGRES = os.environ.get('USE_POSTGRES')

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': get_secret('POSTGRES_DB', 'deepmush'),
        'USER': get_secret('POSTGRES_USER', 'deepmush'),
        'PASSWORD': get_secret('POSTGRES_PASSWORD', 'deepmush'),
        'HOST': 'database',
        'PORT': 5432,
        'TEST': {
            'NAME': 'test_deepmush',
        },
        'OPTIONS': {
            'connect_timeout': 50000
        }
    },
    'mongodb': {
        'ENGINE': 'djongo',
        'ENFORCE_SCHEMA': True,
        'NAME': get_secret('MONGODB_DB', 'deepmush'),
        'CLIENT': {
            'host': 'mongodb',
            'port': 27017,
            'username': get_secret('MONGODB_USERNAME', 'deepmush'),
            'password': get_secret('MONGODB_PASSWORD', 'deepmush'),
            'authSource': 'admin',
            'authMechanism': 'SCRAM-SHA-1',
        },
        'TEST': {
            'NAME': 'test_deepmush',
        },
    }
} if IS_DOCKER else {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': DB_DIR / 'db.sqlite3',
    },
    'mongodb': {
        'ENGINE': 'djongo',
        'ENFORCE_SCHEMA': True,
        'NAME': get_secret('MONGODB_DB', 'deepmush'),
        'CLIENT': {
            'host': 'localhost',
            'port': 27017,
            'username': get_secret('MONGODB_USERNAME', 'deepmush'),
            'password': get_secret('MONGODB_PASSWORD', 'deepmush'),
            'authSource': 'admin',
            'authMechanism': 'SCRAM-SHA-1',
        },
        'TEST': {
            'NAME': 'test_deepmush',
        },
    }
}

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

# JWT
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    )
}

SOCIALACCOUNT_PROVIDERS = {
    'kakao': {
        'APP': {
            'key': get_secret('KAKAO_REST_API_KEY')
        }
    },
    'google': {
        "APP": {
            "client_id": get_secret("GOOGLE_CLIENT_ID"),
            "secret": get_secret("GOOGLE_CLIENT_SECRET"),
        },
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    }
}


SWAGGER_SETTINGS = {
    'DEFAULT_INFO': 'config.urls.api_info',
    'USE_SESSION_AUTH': False,
    'SECURITY_DEFINITIONS': {
        'Token': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = True

DATABASE_ROUTERS = ('config.dbrouters.MongoDBRouter',)


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

STATIC_URL = '/static-files/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static-files')

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# AWS Access
AWS_ACCESS_KEY_ID = get_secret("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = get_secret("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = get_secret("AWS_STORAGE_BUCKET_NAME")

# S3 Storage
DEFAULT_FILE_STORAGE = get_secret("DEFAULT_FILE_STORAGE")
AWS_S3_REGION_NAME = get_secret("AWS_S3_REGION_NAME")
AWS_S3_SIGNATURE_VERSION = get_secret("AWS_S3_SIGNATURE_VERSION")

if IS_DOCKER:
    CELERY_BROKER_URL = 'amqp://rabbitmq:5672'
else:
    CELERY_BROKER_URL = 'amqp://localhost:5672'

CELERY_ACCEPT_CONTENT = ['application/json']

if IS_DOCKER:
    CELERY_RESULT_BACKEND = 'rpc://rabbitmq:5672'
else:
    CELERY_RESULT_BACKEND = 'rpc://localhost:5672'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Seoul'
